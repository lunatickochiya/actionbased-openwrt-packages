From 2872ef1de03105d3d32fe1a12b7add0bb273082d Mon Sep 17 00:00:00 2001
From: hingbong <hingbonglo@gmail.com>
Date: Wed, 6 Nov 2024 12:43:08 +0000
Subject: [PATCH] feat: Implement Round Robin server selection for DNS lookups

* Adds the `RoundRobin` variant to the `ServerOrderingStrategy` enum.
* Modifies `send` function to use AtomicUsize and perform Round Robin selection
  based on the number of concurrent requests.
* Ensures at least one server is used even for `num_concurrent_reqs = 1`.
---
 crates/resolver/src/config.rs                 |  3 ++
 .../src/name_server/name_server_pool.rs       | 28 +++++++++++++++++--
 2 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/crates/resolver/src/config.rs b/crates/resolver/src/config.rs
index 0d0fb85c..b86a8791 100644
--- a/crates/resolver/src/config.rs
+++ b/crates/resolver/src/config.rs
@@ -778,6 +778,9 @@ pub enum ServerOrderingStrategy {
     /// The order provided to the resolver is used. The ordering does not vary
     /// over time.
     UserProvidedOrder,
+    /// The order of servers is rotated in a round-robin fashion. This is useful for
+    /// load balancing and ensuring that all servers are used evenly.
+    RoundRobin,
 }
 
 impl Default for ServerOrderingStrategy {
diff --git a/crates/resolver/src/name_server/name_server_pool.rs b/crates/resolver/src/name_server/name_server_pool.rs
index 6bd0986c..036ff959 100644
--- a/crates/resolver/src/name_server/name_server_pool.rs
+++ b/crates/resolver/src/name_server/name_server_pool.rs
@@ -7,7 +7,10 @@
 
 use std::cmp::Ordering;
 use std::pin::Pin;
-use std::sync::Arc;
+use std::sync::{
+    atomic::{AtomicUsize, Ordering as AtomicOrdering},
+    Arc,
+};
 use std::task::{Context, Poll};
 use std::time::Duration;
 
@@ -37,6 +40,7 @@ pub struct NameServerPool<P: ConnectionProvider + Send + 'static> {
     datagram_conns: Arc<[NameServer<P>]>, /* All NameServers must be the same type */
     stream_conns: Arc<[NameServer<P>]>,   /* All NameServers must be the same type */
     options: ResolverOpts,
+    next_index: Arc<AtomicUsize>,
 }
 
 /// A pool of NameServers
@@ -105,6 +109,7 @@ where
             datagram_conns: Arc::from(datagram_conns),
             stream_conns: Arc::from(stream_conns),
             options,
+            next_index: Arc::from(AtomicUsize::new(0)),
         }
     }
 
@@ -129,6 +134,7 @@ where
             datagram_conns: Arc::from(datagram_conns),
             stream_conns: Arc::from(stream_conns),
             options,
+            next_index: Arc::from(AtomicUsize::new(0)),
         }
     }
 
@@ -142,6 +148,7 @@ where
             datagram_conns: Arc::from(datagram_conns),
             stream_conns: Arc::from(stream_conns),
             options,
+            next_index: Arc::from(AtomicUsize::new(0)),
         }
     }
 
@@ -156,6 +163,7 @@ where
             datagram_conns,
             stream_conns,
             options,
+            next_index: Arc::from(AtomicUsize::new(0)),
         }
     }
 
@@ -163,6 +171,7 @@ where
         opts: ResolverOpts,
         conns: Arc<[NameServer<P>]>,
         request: DnsRequest,
+        next_index: &Arc<AtomicUsize>,
     ) -> Result<DnsResponse, ProtoError> {
         let mut conns: Vec<NameServer<P>> = conns.to_vec();
 
@@ -172,6 +181,18 @@ where
             //   this reorders the inner set
             ServerOrderingStrategy::QueryStatistics => conns.sort_unstable(),
             ServerOrderingStrategy::UserProvidedOrder => {}
+            ServerOrderingStrategy::RoundRobin => {
+                let num_concurrent_reqs = if opts.num_concurrent_reqs > 1 {
+                    opts.num_concurrent_reqs
+                } else {
+                    1
+                };
+                if num_concurrent_reqs < conns.len() {
+                    let index = next_index.fetch_add(num_concurrent_reqs, AtomicOrdering::SeqCst)
+                        % conns.len();
+                    conns.rotate_left(index);
+                }
+            }
         }
         let request_loop = request.clone();
 
@@ -190,6 +211,7 @@ where
         let request = request.into();
         let datagram_conns = Arc::clone(&self.datagram_conns);
         let stream_conns = Arc::clone(&self.stream_conns);
+        let next_index = Arc::clone(&self.next_index);
         // TODO: remove this clone, return the Message in the error?
         let tcp_message = request.clone();
 
@@ -210,7 +232,7 @@ where
 
             // First try the UDP connections
             let udp_res: Result<DnsResponse, ProtoError> =
-                match Self::try_send(opts.clone(), datagram_conns, request).await {
+                match Self::try_send(opts.clone(), datagram_conns, request, &next_index).await {
                     Ok(response) if response.truncated() => {
                         debug!("truncated response received, retrying over TCP");
                         Ok(response)
@@ -229,7 +251,7 @@ where
 
             // Try query over TCP, as response to query over UDP was either truncated or was an
             // error.
-            let tcp_res = Self::try_send(opts, stream_conns, tcp_message).await;
+            let tcp_res = Self::try_send(opts, stream_conns, tcp_message, &next_index).await;
 
             let tcp_err = match tcp_res {
                 res @ Ok(..) => return res.map_err(ProtoError::from),
-- 
2.30.2

